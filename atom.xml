<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[malaguna's boring blog]]></title>
  <link href="http://malaguna.github.io/atom.xml" rel="self"/>
  <link href="http://malaguna.github.io/"/>
  <updated>2015-11-12T17:20:46+01:00</updated>
  <id>http://malaguna.github.io/</id>
  <author>
    <name><![CDATA[Miguel A. Laguna]]></name>
    <email><![CDATA[malaguna@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using beforeShowDay From BackBean Values]]></title>
    <link href="http://malaguna.github.io/blog/2015/11/12/beforeshowday/"/>
    <updated>2015-11-12T17:10:07+01:00</updated>
    <id>http://malaguna.github.io/blog/2015/11/12/beforeshowday</id>
    <content type="html"><![CDATA[<p>I have found some info and examples about using <code>beforeShowDay</code> attribute to enable/disable days in <code>p:calendar</code> component from PrimeFaces, it is easy and strightforward. But, these examples did not retrieve data from back bean, instead it calculate some conditions on JavaScript.</p>

<p>After some reviews on StackOverflow I found a <a href="https://zenidas.wordpress.com/recipes/primefaces-calendar-customization/">great entry</a> in Zenida&rsquo;s blog, about how to do it.</p>

<p>However, this approach did not work on Chrome browser, neither Internet Explorer. So I started debugging and fixed some bugs. Now here you are with a complete solution valid for every browser.</p>

<!-- more -->


<p>I have created a github repository <a href="https://github.com/malaguna/samples">https://github.com/malaguna/samples</a> to build empty projects to test or show some behaviour. Inside this repository I have crieated a <em>beforeShowDay</em> maven project. You can check it out, it is fully working.</p>

<h2>Special considerations</h2>

<p>Here you will find what are the relevant parts that differs with normal usage of prime faces components, and those that bugged me while doing this job.</p>

<h3>Including JavaScript into xhtml</h3>

<p>It is not possible to include a JavaScript function inside an xhtml page anyhow. To avoid problems, the best way is to use <code>&lt;h:outputScript&gt;</code> and <code>CDATA</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;h:outputScript&gt;</span>
</span><span class='line'> //<span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp"> function processDay(date) {</span>
</span><span class='line'><span class="cp">     //Your code goes here ...</span>
</span><span class='line'><span class="cp"> };</span>
</span><span class='line'><span class="cp"> //]]&gt;</span>
</span><span class='line'><span class="nt">&lt;/h:outputScript&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is very important to use double backslash before <code>CDATA</code> starts and also at the end.</p>

<h3>Calling back bean from JavaScript</h3>

<p>If you want to call a back bean method from JavaScript function, you have to use JSTL functions. In order to use JSTL functions inside an xhtml page, you have to include the namespace <code>xmlns:fn="http://java.sun.com/jsp/jstl/functions"</code>.</p>

<p>Now you can use it to invoke a back bean method. For example, the following line will call <code>calendarBean.getSpecialDays();</code> that returns a Java array of strings. This array is <strong>joined</strong> into a JavaScript string with comma separated elements, that are converted into a JavaScript array of strings. I know it seems a bit confusing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">specialDays</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="err">#</span><span class="p">{</span><span class="nx">fn</span><span class="o">:</span><span class="nx">join</span><span class="p">(</span><span class="nx">calendarBean</span><span class="p">.</span><span class="nx">getSpecialDays</span><span class="p">(),</span> <span class="s1">&#39;,&#39;</span><span class="p">)});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Date format</h3>

<p>Due to I want to compare dates inside JavaScript, it is necessary to send dates from back bean to JavaScript well formated. Following formatter is used into Java code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">SimpleDateFormat</span> <span class="n">sdf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, inside JavaScript code you must compare dates ignoring time and timezone information, so previosly it is necessary to transform dates as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">compare1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">(),</span><span class="nx">date</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">(),</span><span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now you can compare dates by means of <code>getTime()</code> function.</p>

<h2>Resulting code</h2>

<p>So, here you have relevant xhtml code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span>
</span><span class='line'>  <span class="na">xmlns:h=</span><span class="s">&quot;http://java.sun.com/jsf/html&quot;</span>
</span><span class='line'>  <span class="na">xmlns:f=</span><span class="s">&quot;http://java.sun.com/jsf/core&quot;</span>
</span><span class='line'>  <span class="na">xmlns:p=</span><span class="s">&quot;http://primefaces.org/ui&quot;</span>
</span><span class='line'>  <span class="na">xmlns:fn=</span><span class="s">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;h:outputScript&gt;</span>
</span><span class='line'>   //<span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp">     function processDay(date) {</span>
</span><span class='line'><span class="cp">         var specialDays = new Array(#{fn:join(calendarBean.getSpecialDays(), &#39;,&#39;)});</span>
</span><span class='line'><span class="cp">         </span>
</span><span class='line'><span class="cp">         for (var i = 0; i &lt; specialDays.length; i++) {</span>
</span><span class='line'><span class="cp">             var sDate = new Date(specialDays[i]);</span>
</span><span class='line'><span class="cp">             </span>
</span><span class='line'><span class="cp">             var compare1 = new Date(date.getFullYear(),date.getMonth(),date.getDate());</span>
</span><span class='line'><span class="cp">             var compare2 = new Date(sDate.getFullYear(),sDate.getMonth(),sDate.getDate());</span>
</span><span class='line'><span class="cp">             </span>
</span><span class='line'><span class="cp">             if(compare1.getTime() == compare2.getTime()) {</span>
</span><span class='line'><span class="cp">                 return [false, &#39;&#39;];</span>
</span><span class='line'><span class="cp">             }</span>
</span><span class='line'><span class="cp">         }</span>
</span><span class='line'><span class="cp">         </span>
</span><span class='line'><span class="cp">         return [true, &#39;&#39;];</span>
</span><span class='line'><span class="cp">     };</span>
</span><span class='line'><span class="cp">  //]]&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/h:outputScript&gt;</span>
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;h:form</span> <span class="na">id=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h:panelGrid</span> <span class="na">columns=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;h:outputLabel</span> <span class="na">value=</span><span class="s">&quot;Calendario :&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;p:calendar</span> <span class="na">id=</span><span class="s">&quot;calendar&quot;</span> <span class="na">mode=</span><span class="s">&quot;inline&quot;</span>
</span><span class='line'>              <span class="na">value=</span><span class="s">&quot;#{calendarBean.currentDay}&quot;</span> <span class="na">beforeShowDay=</span><span class="s">&quot;processDay&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/h:panelGrid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/h:form&gt;</span>
</span><span class='line'>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<p>and back bean method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getSpecialDays</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Calendar</span> <span class="n">cal</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// yesterday</span>
</span><span class='line'>  <span class="n">cal</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">DATE</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;&#39;%s&#39;&quot;</span><span class="o">,</span> <span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">cal</span><span class="o">.</span><span class="na">getTime</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Today</span>
</span><span class='line'>  <span class="n">cal</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">DATE</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;&#39;%s&#39;&quot;</span><span class="o">,</span> <span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">cal</span><span class="o">.</span><span class="na">getTime</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Tomorrow</span>
</span><span class='line'>  <span class="n">cal</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">DATE</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">result</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;&#39;%s&#39;&quot;</span><span class="o">,</span> <span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">cal</span><span class="o">.</span><span class="na">getTime</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method only returns three <em>special</em> days, yesterday, today and tomorrow, as you can see, it is quite easy to calculate other days and return it.</p>

<p>Hope you find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquifying Your Project]]></title>
    <link href="http://malaguna.github.io/blog/2015/06/09/liquifying-your-project/"/>
    <updated>2015-06-09T23:29:51+02:00</updated>
    <id>http://malaguna.github.io/blog/2015/06/09/liquifying-your-project</id>
    <content type="html"><![CDATA[<p>Sometimes, when you use Hibernate in a project, you rely on <em>hbm2ddl</em> utility, it is fast and seems a very nice feature to manage database. However, when the project starts growing up it comes more difficult to maintain. I suffered it recently in a medium size project (150 KLoc) and thus I decided to search for a better option.</p>

<p>After some research, I found <strong>Liquibase</strong> and now I am convinced it is the right way. In this post I am going to tell you how I use <strong>Liquibase</strong>.</p>

<!-- more -->


<p>Of course, I don&rsquo;t want to teach you all about Liquibase, <a href="http://www.liquibase.org/">www.liquibase.org</a> is plenty of documentation. Instead, I tell you what I think Liquibase is good for, and how it saved my day.</p>

<p>Liquibase was designed to define and track DDL evolution independently of the RDBMS, so it is a database agnostic way to define and manage your database model. It has its own language to express <strong>ChangeSet</strong>. Liquibase groups <strong>ChangeSet</strong> into <strong>ChangeLog</strong> files. <strong>ChangeLog</strong> allows you to track database evolution. It is right to think about Liquibase as if it were a kind of CVS for databases.</p>

<p>Liquibase is also capable to obtain differences between two different databases, between a <strong>ChangeLog</strong> and a database, even between Hibernate Mappings and database!. Liquibase expresses differences as a set of <strong>ChangeSet</strong> that you can add to the <strong>ChangeLog</strong>.</p>

<h2>Sample project</h2>

<p>I create a very simple project, called <strong>Casiopea</strong> to show you how I am using Liquibase. You can find this project as a github repo <a href="https://github.com/malaguna/casiopea">Casiopea Project</a>.</p>

<p>This project has no functional code, it only has minimal Maven, Spring, Hibernate and Liquibase configuration. It also has three domain entities, as depicted below, with its Hibernate mappings (xml mappings, not annotations).</p>

<p><img class="center" src="http://malaguna.github.io/images/liquibase-casiopea/model-casiopea.png"></p>

<p>As you can see in the class diagram, there are three entities: <strong>Person</strong>, <strong>Project</strong> and <strong>Role</strong> related through a <strong>MemberShip</strong> relationship entity. This model let me know the role every person plays in the projects they work. As said, it is only an example to show how to use Liquibase.</p>

<h2>What I want from Liquibase?</h2>

<p>I don&rsquo;t want to waste my time, so I want to obtain SQL-DDL scripts from Hibernate mappings. Of course <em>hbm2ddl</em> is straight forward, but it doesn&rsquo;t serve to compare databases nor create SQL migration scripts for production systems.</p>

<p>So I want Liquibase to create SQL-DDL scripts for several RDBMS, compare databases, update databases and create migration scripts. To be more precise, I want Liquibase in my project to work as following:</p>

<p><img class="center" src="http://malaguna.github.io/images/liquibase-casiopea/liquibase-diagram.png"></p>

<ol>
<li><code>mvn compile liquibase:diff</code>: This Maven command compares Hibernate mappings against database and generates a <strong>ChangeSet</strong> that <em>moves</em> database to what Hibernate mappings expects.</li>
<li>The automatically generated <strong>ChangeSet</strong> must be revised by a developer so it can be included into the Liquibase <strong>ChangeLog</strong> file.</li>
<li>After <strong>ChangeLog</strong> modification, it is possible to update database through <code>mvn copmile liquibase:update</code>.</li>
</ol>


<p>It is worth to say that manual revision of the second step is very important. It is very useful to adjust some things as foreign key names, database dependent stuff, data types size, and so on. Of course, it is possible to obtain SQL script with <code>liquibase:updateSQL</code> command.</p>

<h2>Project configuration</h2>

<p>If you want to leverage your project with Liquibase, you have to do following configuration.</p>

<h3>Spring</h3>

<p>Casiopea Project has an Spring application context descriptor (<code>src/main/resources/app-context.xml</code>) with two beans:</p>

<ul>
<li><code>DataSource</code>: which points to database.</li>
<li><code>SessionFactory</code>: which holds Hibernate mappings.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span>
</span><span class='line'>      <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>      ...
</span><span class='line'>
</span><span class='line'>      <span class="c">&lt;!-- Settings de conexion --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;${hibernate.url}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;${hibernate.username}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;${hibernate.password}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;bean</span>    <span class="na">id=</span><span class="s">&quot;sessionFactory&quot;</span>
</span><span class='line'>      <span class="na">class=</span><span class="s">&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mappingLocations&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;list&gt;</span>
</span><span class='line'>              <span class="nt">&lt;value&gt;</span>classpath:/org/malaguna/casiopea/model/Person.hbm.xml<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>              <span class="nt">&lt;value&gt;</span>classpath:/org/malaguna/casiopea/model/Project.hbm.xml<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>              <span class="nt">&lt;value&gt;</span>classpath:/org/malaguna/casiopea/model/MemberShip.hbm.xml<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'>      ...
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, lines 8-10 configure database url, username and password using Maven properties. Lines 18-20, point to mappings classpath location. It is important to define <code>mappingLocations</code> property of <code>LocalSessionFactoryBean</code> instead <code>mappingResources</code> property. The second it is not recognized by liquibase-hiberante plugin.</p>

<h3>Liquibase</h3>

<p>Liquibase is configured by means of <code>liquibase.properties</code> file in resources folder. Here you can find relevant lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">changeLogFile</span><span class="o">:</span> <span class="s">src/main/resources/liquibase/changelog.xml</span>
</span><span class='line'><span class="na">diffChangeLogFile</span><span class="o">:</span> <span class="s">src/main/resources/liquibase/autolog-${project.version}-${user.name}-${timestamp}.xml</span>
</span><span class='line'><span class="na">driver</span><span class="o">:</span> <span class="s">${hibernate.driver}</span>
</span><span class='line'><span class="na">url</span><span class="o">:</span> <span class="s">${hibernate.url}</span>
</span><span class='line'><span class="na">username</span><span class="o">:</span> <span class="s">${hibernate.username}</span>
</span><span class='line'><span class="na">password</span><span class="o">:</span> <span class="s">${hibernate.password}</span>
</span><span class='line'><span class="na">referenceUrl</span><span class="o">:</span> <span class="s">hibernate:spring:app-context.xml?bean=sessionFactory</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lines 3-6, define database connection as in Spring application context, that is, using Maven properties.</p>

<p>Line 2, defines <code>diffChangeLogFile</code> property. This is used when Liquibase calculates differences between mappings and database. Liquibase will write diff in a unique file named from project version, developer name and timestamp maven compilation.</p>

<h3>Maven POM</h3>

<p>Here it is the main configuration. There are three main points:</p>

<ol>
<li>Maven profiles, to define database connection properties</li>
<li>Liquibase plugin, to configure Liquibase execution and dependencies.</li>
<li>Resource filtering, to replace maven variables in Spring, Liquibase and other configuration properties.</li>
</ol>


<h4>Maven profiles</h4>

<p>Following is a fragment of the Maven POM file, where a profile called <code>db-local</code> is defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- Debug config profiles --&gt;</span>
</span><span class='line'><span class="nt">&lt;profile&gt;</span>
</span><span class='line'>  <span class="nt">&lt;id&gt;</span>db-local<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>  <span class="nt">&lt;activation&gt;</span>
</span><span class='line'>      <span class="nt">&lt;activeByDefault&gt;</span>true<span class="nt">&lt;/activeByDefault&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/activation&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- Local HSQLDB server database --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hibernate.dialect&gt;</span>org.hibernate.dialect.HSQLDialect<span class="nt">&lt;/hibernate.dialect&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hibernate.driver&gt;</span>org.hsqldb.jdbcDriver<span class="nt">&lt;/hibernate.driver&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hibernate.url&gt;</span>jdbc:hsqldb:hsql://localhost/casiopea<span class="nt">&lt;/hibernate.url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hibernate.username&gt;</span>sa<span class="nt">&lt;/hibernate.username&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hibernate.password&gt;&lt;/hibernate.password&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'><span class="nt">&lt;/profile&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this profile, Maven points to a local HsqlDB instance called <code>casiopea</code>. You can easily change these values, or you can define new maven profiles to add more database connections.</p>

<p>If you want to start a local HsqlDB instance called <code>casiopea</code> you can download HsqlDB jar and run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> java -cp /path/to/hsqldb-2.3.2.jar org.hsqldb.Server -database.0 file:/path/to/casiopea -dbname.0 casiopea
</span></code></pre></td></tr></table></div></figure>


<h4>Liquibase plugin</h4>

<p>Following is a fragment of the Maven POM file, where Liquibase plugin is configured:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- liquibase management --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.liquibase<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>liquibase-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>${liquibase.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;propertyFile&gt;</span>target/classes/liquibase.properties<span class="nt">&lt;/propertyFile&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 7, shows that <code>liquibase.properties</code> is not read from resources path but from target. This is because of the Maven filtering process.</p>

<h4>Resource filtering</h4>

<p>Resource filtering is configured in maven as usual, including the files that contain Maven properties. You can check it at the end of the Maven pom, inside build section.</p>

<h2>Running the project</h2>

<p>Before running this project it is very important to say that it won&rsquo;t work. There is a bug with the Liquibase Hibernate plugin that ignores Spring SessionFactory bean, when using <code>org.springframework.orm.hibernate4.LocalSessionFactory</code>.</p>

<p>I documented this bug as <a href="https://github.com/liquibase/liquibase-hibernate/issues/61">#61</a>. Until this bug won&rsquo;t be resolved, Casiopea project does not work properly. Instead you could use a forked version of Liquibase Hibernate plugin where I solved this bug.</p>

<p>So, if you still want to use Casiopea project, you can clone my <a href="https://github.com/malaguna/liquibase-hibernate">liquibase-hibernate fork</a> and install it localy using <code>mvn install</code>. This command will deploy in your local maven repository the 3.6-SNAPSHOT version that you need.</p>

<p>Once installed this dependecy, you can start a local instance of HsqlDB as explained above, and run <code>liquibase:diff</code>. You will find a message similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mall02@tk-x220-t:~/Repos/casiopea$ mvn compile liquibase:diff
</span><span class='line'>[INFO] Scanning for projects...
</span><span class='line'>[INFO]
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO] Building Casiopea 0.0.1-SNAPSHOT
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO]
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Reading hibernate configuration hibernate:spring:app-context.xml?bean=sessionFactory
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Found mappingLocation classpath:/org/malaguna/casiopea/model/Person.hbm.xml
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Adding resource  file:/home/mall02/Repos/casiopea/target/classes/org/malaguna/casiopea/model/Person.hbm.xml
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Found mappingLocation classpath:/org/malaguna/casiopea/model/Project.hbm.xml
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Adding resource  file:/home/mall02/Repos/casiopea/target/classes/org/malaguna/casiopea/model/Project.hbm.xml
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Found mappingLocation classpath:/org/malaguna/casiopea/model/MemberShip.hbm.xml
</span><span class='line'>INFO 9/06/15 23:12: liquibase-hibernate: Adding resource  file:/home/mall02/Repos/casiopea/target/classes/org/malaguna/casiopea/model/MemberShip.hbm.xml
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>[INFO] Differences written to Change Log File, src/main/resources/liquibase/autolog-0.0.1-SNAPSHOT-mall02-20150609231229.xml
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO]
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO] BUILD SUCCESS
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span><span class='line'>[INFO] Total time: 3.494s
</span><span class='line'>[INFO] Finished at: Tue Jun 09 23:12:32 CEST 2015
</span><span class='line'>[INFO] Final Memory: 17M/212M
</span><span class='line'>[INFO] ------------------------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<p>Line 11, tells you Liquibase Hibernate plugin has found Spring application context and <code>sessionFactory</code> bean.</p>

<p>Lines 15-20, list all mapped entities that are defined in <code>sessionFactory</code>. Finally, line 24, shows where Liquibase has written automated <strong>ChangeSet</strong>. You can edit this file and found how good is Liquibase ;)</p>

<p>Now you can review the autolog and copy all ChangeSets to ChangeLog file. After that, you can run <code>liquibase:update</code> or <code>liquibase:updateSQL</code> and smile for a while.</p>

<p>I hope you enjoy reading this post, and obviously I would like you find it helpful.</p>

<p>Thank you for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://malaguna.github.io/blog/2015/05/14/wellcome/"/>
    <updated>2015-05-14T20:13:41+02:00</updated>
    <id>http://malaguna.github.io/blog/2015/05/14/wellcome</id>
    <content type="html"><![CDATA[<p>Hi, this is my very first post in octopress ;) so it is a kind of hello world!</p>

<!-- more -->


<p>I need to probe several things about markdown syntax:</p>

<ul>
<li>lists</li>
<li>code</li>
<li>something else</li>
</ul>


<figure class='code'><figcaption><span>Java sample code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//This is some comment </span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">someSqlMethod</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">query</span> <span class="o">=</span> <span class="s">&quot;select column from table where id = :id&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createSQLQuery</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">addScalar</span><span class="o">(</span><span class="s">&quot;column&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">setInteger</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">uniqueResult</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span><span class="kc">null</span><span class="o">)?(</span><span class="n">String</span><span class="o">)</span> <span class="nl">result:</span><span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks like perfect!</p>
]]></content>
  </entry>
  
</feed>
